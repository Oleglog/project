1 Практическая
	HTTP запросы обрабатываются в файле views.py
	За маршрутизацию в Django отвечает файл urls.py
	django-admin startproject имя_проекта
	python manage.py startapp имя_приложения


2 Практическая
	Приложение подключается в файле settings.py
	Функция render используется для генерации HTML-страниц на основе шаблонов.
	HTML шаблоны обычно сохраняются в папке templates


3 Практическая
	Файл models.py в Django используется для определения моделей данных, которые представляют структуру базы данных.
	python manage.py makemigrations
	Скрипты для миграции хранятся в папке migrations, которая находится внутри каждого приложения Django.
	python manage.py migrate


4 Практическая
	Связь один-к-одному означает, что каждой записи в одной модели соответствует ровно одна запись в другой модели.
	Связь один-ко-многим означает, что одной записи в одной модели может соответствовать несколько записей в другой модели.
	Связь многие-ко-многим означает, что записи в одной модели могут быть связаны с несколькими записями в другой модели и наоборот.


5 Практическая
	Модель обычно регистрируется в файле admin.py вашего приложения Django.
	Для регистрации модели в админ-панели используется декоратор @admin.register()
	Админ-панель в Django предоставляет удобный интерфейс для управления данными вашего приложения.


6 Практическая
	get():
		Используется для получения единственного объекта из базы данных.
		Если объект с заданными параметрами не найден, будет выброшено исключение DoesNotExist.
		Если найдено более одного объекта, будет выброшено исключение MultipleObjectsReturned.
	filter():
		Используется для получения набора объектов, соответствующих заданным критериям.
		Возвращает QuerySet, который может содержать ноль или более объектов.
		Если объекты не найдены, просто возвращается пустой QuerySet.
	В Django ORM можно создавать запросы по связям между моделями, используя двойное подчеркивание (__) для доступа к полям связанных моделей. 


7 Практическая
	Шаблонизатор в Django (и в веб-разработке в целом) используется для разделения логики приложения и представления (интерфейса).
	В Django наследование шаблонов осуществляется с помощью тегов {% extends %} и {% block %}.
	{{ }} — используется для вывода значений переменных. Например, {{ variable_name }} выведет значение переменной variable_name в HTML. Это синтаксис для отображения данных.
	{% %} — используется для выполнения управляющих конструкций, таких как условия, циклы и другие логические операции. Например, {% if condition %} ... {% endif %} позволяет выполнять код в зависимости от условия.
	Это синтаксис для управления логикой шаблона.


8 Практическая
	В Django аргумент name в функции path() используется для присвоения уникального имени маршруту (URL).
	Pillow — это библиотека для обработки изображений в Python. Она является улучшенной версией библиотеки PIL (Python Imaging Library) и предоставляет множество функций для работы с изображениями.


9 Практическая
	Персональные ссылки (или "персонализированные ссылки") — это ссылки, которые ведут на уникальные страницы или ресурсы, созданные для конкретного пользователя или группы пользователей. 


10 Практическая
	GET POST PUT DELETE HEAD OPTIONS PATCH
	Каждый из этих запросов имеет свои особенности и предназначение, и выбор метода зависит от того, что именно вы хотите сделать с ресурсом на сервере.


11 Практическая
	CSRF-токен (Cross-Site Request Forgery Token) — это механизм безопасности, используемый для защиты веб-приложений от атак типа "подделка межсайтовых запросов" (CSRF).


12 Практическая
	Аутентификация и авторизация — это два разных, но взаимосвязанных процесса, которые обеспечивают безопасность и контроль доступа в системах.


13Практическая
	Django предоставляет встроенную систему аутентификации, которая поддерживает несколько методов аутентификации. Форма аутентификации Модель пользователя Система сессий Аутентификация через социальные сети Аутентификация на основе токенов
	 Аутентификация необходима для:  Безопасности Идентификации пользователей Контроля доступа Защиты данных


14 Практическая
	Контекст-процессор — это функция, которая позволяет добавлять переменные в контекст шаблона, доступный для всех шаблонов в Django. Контекст-процессоры используются для передачи данных, которые могут быть полезны в различных шаблонах, без необходимости явно передавать их в каждом представлении.
	Сессии на основе базы данных Сессии на основе файлов Сессии на основе кэша Сессии на основе куки Сессии на основе сторонних хранилищ

	

